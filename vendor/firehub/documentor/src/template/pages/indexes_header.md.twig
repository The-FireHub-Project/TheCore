{% import "macro.twig" as macro %}{# macro #}
{% if node.tags.experimental|length > 0 %}{# is experimental #}
{: .warning }
>
> This {{ nodetype }} has **experimental** flag.
> This features is still under the development phase and not ready to be deployed into the actual software or product.
>
> {{ node.tags.experimental|first.description|raw }}

{% endif %}{# end is experimental #}
{% if node.deprecated %}{# is deprecated #}
{: .warning }
{% if node.tags.deprecated|first.version|length > 0 %}
> This {{ nodetype }} is deprecated in version {{ node.tags.deprecated|first.version }}
{% endif %}
>
> {{ node.tags.deprecated|first.description|raw }}

# ~~{{ node.name }}~~
{% else %}{# else not deprecated #}
# {{ node.name }}
{% endif %}{# end is deprecated #}
{% if node.final %}{# final class #}

{: .note }
> This {{ nodetype }} is marked as **final** and can't be subclassed.

{% endif %}{# end final class #}
{% if node.abstract %}{# abstract class #}

{: .note }
> This is an **abstract** {{ nodetype }} that cannot be instantiated directly.

{% endif %}{# end abstract class #}
{% if node.hasReturnByReference %}{# return by refrence #}

{: .caution }
> This {{ nodetype }} is returned by **refrence**.

{% endif %}{# end return by refrence #}
{% for tagName,tags in node.file.tags if tagName in ['todo'] %}{# todo tag #}
{% for tag in tags %}

{: .info-title }
> Todo
>
> {{ tag.description|raw }}

{% endfor %}
{% endfor %}{# end todo tag #}
{% for tagName,tags in node.tags if tagName in ['todo'] %}{# todo tag #}
{% for tag in tags %}

{: .info-title }
> Todo
>
> {{ tag.description|raw }}

{% endfor %}
{% endfor %}{# end todo tag #}
{% for tagName,tags in node.file.tags if tagName in ['fixme'] %}{# fixme tag #}
{% for tag in tags %}

{: .info-title }
> FixMe
>
> {{ tag.description|raw }}

{% endfor %}
{% endfor %}{# end fixme tag #}
{% for tagName,tags in node.tags if tagName in ['fixme'] %}{# fixme tag #}
{% for tag in tags %}

{: .info-title }
> FixMe
>
> {{ tag.description|raw }}

{% endfor %}
{% endfor %}{# end fixme tag #}

```php
{% autoescape false %}
{% if node.final %}{{ 'final' }} {% endif %}{% if node.abstract %}{{ 'abstract' }} {% endif %}{{ nodetype }} {% if node.type %}{{ node.type }} {% endif %}{% if nodetype != 'constant' and nodetype != 'enum' and nodetype != 'interface' %}{{ node.namespace }}\{{ node.hasReturnByReference ? '&' }}{{ node.name }}({% for parameter in node.arguments %}{% if loop.first %}{{ parameter.type|raw }} {{ parameter.byReference ? '&' }}{{ parameter.isVariadic ? '...' }}${{ parameter.name }}{% if parameter.default %} = {{ parameter.default|raw }}{% endif %}{% else %}, {{ parameter.type|raw }} {{ parameter.byReference ? '&' }}{{ parameter.isVariadic ? '...' }}${{ parameter.name }}{% if parameter.default %} = {{ parameter.default|raw }}{% endif %}{% endif %}{% endfor %}){% else %}{{ node.FullyQualifiedStructuralElementName }}{% endif %}{% if node.tags.return|first.type %}:{{ node.tags.return|first.type }}{% endif %}{% if node.value %} = {{ node.value|raw }}{% endif %}
{% endautoescape %}

```

{% if node.summary|length > 0 %}{# node summary #}
### {{ node.summary|raw }}

{% endif %}{# end node summary #}
{% if node.description|length > 0 %}{# node description #}
_{{ node.description|raw }}_

{% endif %}{# end node description #}
{% if node.FullyQualifiedStructuralElementName|length > 0 %}{# fully qualified element name #}
<sub>Fully Qualified {{ nodetype|capitalize }} Name:  **{{ node.FullyQualifiedStructuralElementName }}**</sub><br>
{% endif %}{# end fully qualified element name #}
{% if node.package|length > 0 %}{# package #}
<sub>This {{ nodetype }} is part of package:  **{{ node.package|raw }}**</sub><br>
{% endif %}{# end package #}
{% if node.parent and node.parent.FullyQualifiedStructuralElementName != '' %}{# extend parent #}
<sub>Parent {{ nodetype }}:  **{{ macro.IndexLink(node.parent, node.parent.FullyQualifiedStructuralElementName)|trim|raw }}**</sub><br>
{% endif %}{# end extend parent #}
{% if node.parent is not empty %}{# extends parents #}
{% for parent in node.parent %}
<sub>Extends {{ nodetype }}:  **{{ macro.IndexLink(parent, parent.FullyQualifiedStructuralElementName)|trim|raw }}**</sub><br>
{% endfor %}
{% endif %}{# end extends parents #}
{% if node.interfaces is not empty %}{# implement interface #}
{% for interface in node.interfaces %}
<sub>Implements:  **{{ macro.IndexLink(interface, interface.FullyQualifiedStructuralElementName)|trim|raw }}**</sub><br>
{% endfor %}
{% endif %}{# end implement interface #}
{% if node.usedTraits is not empty %}{# uses traits #}
{% for trait in node.usedTraits %}
<sub>Uses:  **{{ macro.IndexLink(trait, trait.FullyQualifiedStructuralElementName)|trim|raw }}**</sub><br>
{% endfor %}
{% endif %}{# end uses traits #}
{% if node.line is not empty %}{# github #}
<sub>Source code:  **[{{ 'view source code' }}]({{ 'https://github.com/The-FireHub-Project/' ~ project.settings.custom.app_name ~ '/blob/' ~ project.settings.custom.branch ~ '/' ~ node.file ~ '#L' ~ node.line }})**</sub><br>
<sub>Blame:  **[{{ 'view blame' }}]({{ 'https://github.com/The-FireHub-Project/' ~ project.settings.custom.app_name ~ '/blame/' ~ project.settings.custom.branch ~ '/' ~ node.file }})**</sub><br>
<sub>History:  **[{{ 'view history' }}]({{ 'https://github.com/The-FireHub-Project/' ~ project.settings.custom.app_name ~ '/commits/' ~ project.settings.custom.branch ~ '/' ~ node.file }})**</sub><br>
{% endif %}{# end github #}

{% if node.file.author|length > 0 %}{# author tag #}
<sub>_This {{ nodetype }} was created by {% for tag in node.file.author %}{% if loop.first %}{{ tag.description|raw }}{% else %} and {{ tag.description|raw }}{% endif %}{% endfor %}_</sub><br>
{% endif %}{# end author tag #}
{% if node.file.tags.copyright|length > 0 %}{# copyright tag #}
<sub>_{{ node.file.tags.copyright|first.description|raw }}_</sub><br>
{% endif %}{# end copyright tag #}
{% if node.file.tags.license|length > 0 %}{# license tag #}
<sub>_{{ node.file.tags.license|first.description|raw }}_</sub><br>
{% endif %}{# end license tag #}
{% if node.file.version|length > 0 %}{# version tag #}
<sub>_{{ node.file.version|first.version }} {{ node.file.version|first.description|raw }}_</sub><br>
{% endif %}{# end version tag #}
{% for tagName,tags in node.tags if tagName in ['since'] %}{# since tag #}
{% if tags|length > 0 %}

## Changelog
***
{% endif %}
{% for tag in tags %}

* **{{ tag.version }}** {% if tag.description|length > 0 %}_{{ tag.description|raw }}_{% endif %}
{% endfor %}
{% endfor %}{# end since tag #}